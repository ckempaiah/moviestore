// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.sjsu.movie.domain;

import com.sjsu.movie.domain.MovieDataOnDemand;
import com.sjsu.movie.domain.MovieRental;
import com.sjsu.movie.domain.MovieRentalDataOnDemand;
import com.sjsu.movie.domain.MovieUserDataOnDemand;
import com.sjsu.movie.service.MovieRentalService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect MovieRentalDataOnDemand_Roo_DataOnDemand {
    
    declare @type: MovieRentalDataOnDemand: @Component;
    
    private Random MovieRentalDataOnDemand.rnd = new SecureRandom();
    
    private List<MovieRental> MovieRentalDataOnDemand.data;
    
    @Autowired
    MovieDataOnDemand MovieRentalDataOnDemand.movieDataOnDemand;
    
    @Autowired
    MovieUserDataOnDemand MovieRentalDataOnDemand.movieUserDataOnDemand;
    
    @Autowired
    MovieRentalService MovieRentalDataOnDemand.movieRentalService;
    
    public MovieRental MovieRentalDataOnDemand.getNewTransientMovieRental(int index) {
        MovieRental obj = new MovieRental();
        setComments(obj, index);
        setDueDate(obj, index);
        setMovieId(obj, index);
        setMovieRentalId(obj, index);
        setRentedDate(obj, index);
        setReturnedDate(obj, index);
        setUpdatedDate(obj, index);
        setUserId(obj, index);
        return obj;
    }
    
    public void MovieRentalDataOnDemand.setComments(MovieRental obj, int index) {
        String comments = "comments_" + index;
        obj.setComments(comments);
    }
    
    public void MovieRentalDataOnDemand.setDueDate(MovieRental obj, int index) {
        Date dueDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDueDate(dueDate);
    }
    
    public void MovieRentalDataOnDemand.setMovieId(MovieRental obj, int index) {
        Integer movieId = new Integer(index);
        obj.setMovieId(movieId);
    }
    
    public void MovieRentalDataOnDemand.setMovieRentalId(MovieRental obj, int index) {
        Integer movieRentalId = new Integer(index);
        obj.setMovieRentalId(movieRentalId);
    }
    
    public void MovieRentalDataOnDemand.setRentedDate(MovieRental obj, int index) {
        Date rentedDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setRentedDate(rentedDate);
    }
    
    public void MovieRentalDataOnDemand.setReturnedDate(MovieRental obj, int index) {
        Date returnedDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setReturnedDate(returnedDate);
    }
    
    public void MovieRentalDataOnDemand.setUpdatedDate(MovieRental obj, int index) {
        Date updatedDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setUpdatedDate(updatedDate);
    }
    
    public void MovieRentalDataOnDemand.setUserId(MovieRental obj, int index) {
        Integer userId = new Integer(index);
        obj.setUserId(userId);
    }
    
    public MovieRental MovieRentalDataOnDemand.getSpecificMovieRental(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        MovieRental obj = data.get(index);
        Long id = obj.getId();
        return movieRentalService.findMovieRental(id);
    }
    
    public MovieRental MovieRentalDataOnDemand.getRandomMovieRental() {
        init();
        MovieRental obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return movieRentalService.findMovieRental(id);
    }
    
    public boolean MovieRentalDataOnDemand.modifyMovieRental(MovieRental obj) {
        return false;
    }
    
    public void MovieRentalDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = movieRentalService.findMovieRentalEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'MovieRental' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<MovieRental>();
        for (int i = 0; i < 10; i++) {
            MovieRental obj = getNewTransientMovieRental(i);
            try {
                movieRentalService.saveMovieRental(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
